const fs = require('fs')
var Verifier = artifacts.require('./Verifier.sol');

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
contract('Verifier', async(accounts) => {
    var conf;
    var proof;
    var inp;
    var verifier;
    before('setup contract', async () =>{
        proof = JSON.parse(fs.readFileSync('../zokrates/code/square/proof.json'));
        inp = proof.inputs;
        proof = proof.proof
        verifier = await Verifier.new();
    });
    describe ('correct proof verification', () => {
        it('Verifier.verifyTx will return true when given the correct proof', async() => {
            let res = await verifier.verifyTx.call(
                proof.a,
                proof.b,
                proof.c,
                inp
            );
            console.log ("res is: "+res);
            assert.equal(res, true, "proof should be true");


        })
        it('Verifier.verifyTx will return false when given an incorrect proof', async() =>{
        //let's swap a and b and see what happens
        let fakeinputs = ["0x0000000000000000000000000000000000000000000000000000000000000008",
        "0x0000000000000000000000000000000000000000000000000000000000000001"]
        let res = await verifier.verifyTx.call(
            proof.a,
            proof.b,
            proof.c,

            fakeinputs
        );
        console.log ("res is: "+res);
        assert.equal(res, false, "proof should be false");
    })




    });
});
